# This file is based on the default nginx.conf merged into
# https://raw.github.com/darktable/html5-boilerplate-server-configs/master/nginx.conf

# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

# Note: this should be www-data on Ubuntu
user  www-data;

worker_processes  4;

error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

# Maximum file descriptors that can be opened per process
# This should be > worker_connections
worker_rlimit_nofile 8192;

events {
    # When you need > 8000 * cpu_cores connections, you start optimizing
    # your OS, and this is probably the point at where you hire people
    # who are smarter than you, this is *a lot* of requests.
    worker_connections  8000;

    # This sets up some smart queueing for accept(2)'ing requests
    # Set it to "on" if you have > worker_processes
    accept_mutex off;

    # These settings are OS specific, by defualt Nginx uses select(2),
    # however, for a large number of requests epoll(2) and kqueue(2)
    # are generally faster than the default (select(2))
    use epoll; # enable for Linux 2.6+
    # use kqueue; # enable for *BSD (FreeBSD, OS X, ..)
}



http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    log_format  csv '$remote_addr,[$time_local],$status,'
                    '$body_bytes_sent,$request_time,"$upstream_addr",'
                    '"$request","$http_referer","$http_user_agent",'
                    '"$cookie_user",$upstream_cache_status';

    access_log  /var/log/nginx/access.log  main;

    server_tokens   off;    # No Server HTTP header, please
    sendfile        on;
    tcp_nopush on;  # off may be better for Comet/long-poll stuff
    tcp_nodelay on; # on may be better for Comet/long-poll stuff

    # keepalive_timeout  0;
    keepalive_timeout  65;

    # Enable Gzip
    gzip  on;
    gzip_http_version 1.0;
    gzip_comp_level 6;
    gzip_min_length 1100;
    gzip_buffers     4 8k;
    gzip_proxied any;
    gzip_types
        # text/html is always compressed by HttpGzipModule
        text/css
        text/javascript
        text/xml
        text/plain
        text/csv
        text/x-component
        application/javascript
        application/json
        application/xml
        application/rss+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;

    gzip_static on;

    gzip_proxied        expired no-cache no-store private auth;
    gzip_disable        "MSIE [1-6]\.";
    gzip_vary           on;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    # You need to make this directory first. (On Ubuntu, user/group is www-data)
        # sudo mkdir -p /var/cache/nginx
        # sudo chown nginx /var/cache/nginx
        # sudo chgrp nginx /var/cache/nginx
        # sudo chmod 700 /var/cache/nginx
    proxy_cache_path /var/cache/nginx/gramener.com
                     levels=1:2
                     keys_zone=gramener.com:100m
                     inactive=10d
                     max_size=2g;

    # This stuff is Tornado-related
    proxy_read_timeout 200;

    # Only retry if there was a communication error, not a timeout
    # on the Tornado server (to avoid propagating "queries of death"
    # to all frontends)
    proxy_next_upstream error;

    # This is required for Google's OAuth to work
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Scheme $scheme;

    # Gramex header is passed back to the server
    proxy_pass_header Server;

    upstream ibn_frontends {
        server 127.0.0.1:7101;
        server 127.0.0.1:7102;
        server 127.0.0.1:7103;
        server 127.0.0.1:7104;
    }

    # ibn.gramener.com and ibn2.gramener.com (runs on Azure)
    server {
        listen      80;
        server_name ibn.gramener.com ibn2.gramener.com ibnlive.gramener.com maps.ibnlive.in.com election-results.ibnlive.in.com ibn.trafficmanager.net;

        # Same proxy settings as gramener.com
        proxy_cache gramener.com;
        proxy_cache_key "$host$request_uri";
        proxy_cache_use_stale error timeout updating http_502 http_503 http_504;
        proxy_intercept_errors on;

        access_log  /var/log/nginx/access.ibn.log csv;
        error_log   /var/log/nginx/error.ibn.log;

        location / {
            proxy_pass  http://ibn_frontends;
        }
    }

    upstream ibn_testends {
        server 127.0.0.1:7105;
        server 127.0.0.1:7106;
    }

    # ibn.gramener.com (runs on Azure)
    server {
        listen      80;
        server_name gramener.cloudapp.net ibn2.cloudapp.net;

        # Same proxy settings as gramener.com
        proxy_cache gramener.com;
        proxy_cache_key "$host$request_uri";
        proxy_cache_use_stale error timeout updating http_502 http_503 http_504;
        proxy_intercept_errors on;

        access_log  /var/log/nginx/access.ibn.log csv;
        error_log   /var/log/nginx/error.ibn.log;

        location / {
            proxy_pass  http://ibn_testends;
        }
    }

    server {
        listen 80 default_server deferred;
        server_name  localhost;

        # Do not log load balancer requests. http://serverfault.com/a/410561
        access_log off;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }

        expires 1M;

        # opt-in to the future
        add_header "X-UA-Compatible" "IE=Edge,chrome=1";

        # redirect server error pages to the static page /40x.html
        #
        error_page  404              /404.html;
        location = /40x.html {
            root   /usr/share/nginx/html;
        }

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
}
